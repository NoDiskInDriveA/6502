package cpu

type Cycle int

const (
	CYCLE_HALT                             Cycle = iota //artificial
	CYCLE_WAIT                             Cycle = iota
	CYCLE_FETCH_OPCODE                     Cycle = iota
	CYCLE_FETCH_IMMEDIATE                  Cycle = iota
	CYCLE_FETCH_ADDRESS_LOW                Cycle = iota
	CYCLE_FETCH_ADDRESS_HIGH               Cycle = iota
	CYCLE_FETCH_DATA                       Cycle = iota
	CYCLE_FETCH_PCH_SET_PC                 Cycle = iota
	CYCLE_READ_EFFECTIVE_TO_REG            Cycle = iota
	CYCLE_READ_EFFECTIVE_TO_REG_INDEXED_ZP Cycle = iota
	CYCLE_READ_D_TO_REG                    Cycle = iota
	CYCLE_WRITE_REG_TO_EFFECTIVE           Cycle = iota
	CYCLE_ALU_ADC                          Cycle = iota
)

type RegisterDef string

const (
	REGISTER_A    RegisterDef = "A"
	REGISTER_X    RegisterDef = "X"
	REGISTER_Y    RegisterDef = "Y"
	REGISTER_NONE RegisterDef = ""
)

type CycleDef struct {
	C    Cycle
	Reg1 RegisterDef
	Reg2 RegisterDef
}

const (
	OPCODE_HALT           uint8 = 0xFF // artificial
	OPCODE_NOP_IMPLIED    uint8 = 0xEA
	OPCODE_JMP_ABSOLUTE   uint8 = 0x4C
	OPCODE_LDA_IMMEDIATE  uint8 = 0xA9 // LDA #10
	OPCODE_LDA_INDIRECT_X uint8 = 0xA1
	OPCODE_LDA_ZEROPAGE   uint8 = 0xA5
	OPCODE_LDA_ABSOLUTE   uint8 = 0xAD
	OPCODE_LDA_INDIRECT_Y uint8 = 0xB1
	OPCODE_LDA_ZEROPAGE_X uint8 = 0xB5
	OPCODE_LDA_ABSOLUTE_Y uint8 = 0xB9
	OPCODE_LDA_ABSOLUTE_X uint8 = 0xBD
	OPCODE_ADC_IMMEDIATE  uint8 = 0x69 // ADC #20
	OPCODE_STA_DIRECT_ZP  uint8 = 0x85 // STA $8080
	OPCODE_STA_DIRECT     uint8 = 0x8D // STA $80
	OPCODE_LDX_IMMEDIATE  uint8 = 0xA2 // LDX #10
	OPCODE_LDY_IMMEDIATE  uint8 = 0xA0 // LDX #10
)

var CycleDefinitionMap = map[uint8][]CycleDef{
	OPCODE_NOP_IMPLIED: {
		CycleDef{CYCLE_WAIT, REGISTER_NONE, REGISTER_NONE},
		CycleDef{CYCLE_WAIT, REGISTER_NONE, REGISTER_NONE},
	},
	OPCODE_JMP_ABSOLUTE: {
		CycleDef{CYCLE_FETCH_IMMEDIATE, REGISTER_NONE, REGISTER_NONE},
		CycleDef{CYCLE_FETCH_PCH_SET_PC, REGISTER_NONE, REGISTER_NONE},
	},
	OPCODE_LDA_IMMEDIATE: {
		CycleDef{CYCLE_FETCH_IMMEDIATE, REGISTER_NONE, REGISTER_NONE},
		CycleDef{CYCLE_READ_D_TO_REG, REGISTER_A, REGISTER_NONE},
	},
	OPCODE_LDA_ABSOLUTE: {
		CycleDef{CYCLE_FETCH_ADDRESS_LOW, REGISTER_NONE, REGISTER_NONE},
		CycleDef{CYCLE_FETCH_ADDRESS_HIGH, REGISTER_NONE, REGISTER_NONE},
		CycleDef{CYCLE_READ_EFFECTIVE_TO_REG, REGISTER_A, REGISTER_NONE},
	},
	OPCODE_LDA_ZEROPAGE: {
		CycleDef{CYCLE_FETCH_ADDRESS_LOW, REGISTER_NONE, REGISTER_NONE},
		CycleDef{CYCLE_READ_EFFECTIVE_TO_REG, REGISTER_A, REGISTER_NONE},
	},
	OPCODE_LDA_ZEROPAGE_X: {
		CycleDef{CYCLE_FETCH_ADDRESS_LOW, REGISTER_NONE, REGISTER_NONE},
		CycleDef{CYCLE_READ_EFFECTIVE_TO_REG_INDEXED_ZP, REGISTER_A, REGISTER_X},
	},
	OPCODE_ADC_IMMEDIATE: {
		CycleDef{CYCLE_FETCH_IMMEDIATE, REGISTER_NONE, REGISTER_NONE},
		CycleDef{CYCLE_ALU_ADC, REGISTER_NONE, REGISTER_NONE},
	},
	OPCODE_STA_DIRECT_ZP: {
		CycleDef{CYCLE_FETCH_ADDRESS_LOW, REGISTER_NONE, REGISTER_NONE},
		CycleDef{CYCLE_WRITE_REG_TO_EFFECTIVE, REGISTER_A, REGISTER_NONE},
	},
	OPCODE_STA_DIRECT: {
		CycleDef{CYCLE_FETCH_ADDRESS_LOW, REGISTER_NONE, REGISTER_NONE},
		CycleDef{CYCLE_FETCH_ADDRESS_HIGH, REGISTER_NONE, REGISTER_NONE},
		CycleDef{CYCLE_WRITE_REG_TO_EFFECTIVE, REGISTER_A, REGISTER_NONE},
	},
	OPCODE_LDY_IMMEDIATE: {
		CycleDef{CYCLE_FETCH_IMMEDIATE, REGISTER_NONE, REGISTER_NONE},
		CycleDef{CYCLE_READ_EFFECTIVE_TO_REG, REGISTER_Y, REGISTER_NONE},
	},
	OPCODE_LDX_IMMEDIATE: {
		CycleDef{CYCLE_FETCH_IMMEDIATE, REGISTER_NONE, REGISTER_NONE},
		CycleDef{CYCLE_READ_EFFECTIVE_TO_REG, REGISTER_X, REGISTER_NONE},
	},
}
